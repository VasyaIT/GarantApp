;;
;; Header files for GarantWallet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $NftTransfer$_store
builder $NftTransfer$_store(builder build_0, (int, slice, slice, cell, int, slice) v) inline_ref;

;; $NftTransfer$_store_cell
cell $NftTransfer$_store_cell((int, slice, slice, cell, int, slice) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $GarantWallet$_store
builder $GarantWallet$_store(builder build_0, (slice, int, int, slice) v) inline;

;; $GarantWallet$_load
(slice, ((slice, int, int, slice))) $GarantWallet$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Data$_to_external
(slice, int, int, slice) $Data$_to_external(((slice, int, int, slice)) v) inline;

;; $GarantWallet$init$_load
(slice, ((slice, int, int, slice))) $GarantWallet$init$_load(slice sc_0) inline;

;; $GarantWallet$_contract_init
(slice, int, int, slice) $GarantWallet$_contract_init(slice $owner, int $amount, int $isTon, slice $nftAddress) impure inline_ref;

;; $GarantWallet$_contract_load
(slice, int, int, slice) $GarantWallet$_contract_load() impure inline_ref;

;; $GarantWallet$_contract_store
() $GarantWallet$_contract_store((slice, int, int, slice) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $NftTransfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload
((int, slice, slice, cell, int, slice)) $NftTransfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(int query_id, slice new_owner, slice response_destination, cell custom_payload, int forward_amount, slice forward_payload) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline;

;; $GarantWallet$_fun_sendNft
((slice, int, int, slice), ()) $GarantWallet$_fun_sendNft((slice, int, int, slice) $self, slice $newOwner) impure inline_ref;

;; $Data$_constructor_owner_amount_isTon_nftAddress
((slice, int, int, slice)) $Data$_constructor_owner_amount_isTon_nftAddress(slice owner, int amount, int isTon, slice nftAddress) inline;

;; $GarantWallet$_fun_data
((slice, int, int, slice), (slice, int, int, slice)) $GarantWallet$_fun_data((slice, int, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $GarantWallet$_fun_forward
((slice, int, int, slice), ()) $GarantWallet$_fun_forward((slice, int, int, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $GarantWallet$_fun_notify
((slice, int, int, slice), ()) $GarantWallet$_fun_notify((slice, int, int, slice) $self, cell $body) impure inline;

;; $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;

;; $SendParameters$_constructor_to_body_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;

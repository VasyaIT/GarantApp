#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Garant.headers.fc";
#include "tact_Garant.stdlib.fc";
#include "tact_Garant.storage.fc";

;;
;; Contract Garant functions
;;

(slice) $Garant$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner)) = (null());
    $self'owner = $owner;
    return ($self'owner);
}

((slice), int) $Garant$_fun_balance((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), __tact_my_balance());
}

((slice), ()) $Garant$_fun_requireOwner((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner), ());
}

((slice), slice) $Garant$_fun_owner((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), $self'owner);
}

;;
;; Receivers of a Contract Garant
;;

(((slice)), ()) $Garant$_internal_binary_Withdraw((slice) $self, (int, slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'amount, $msg'jettonWalletAddress) = $msg;
    ($self'owner)~$Garant$_fun_requireOwner();
    cell $transferBody = $TokenTransfer$_store_cell($TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(0, $msg'amount, $self'owner, $self'owner, $global_emptyCell(), 0, begin_parse(end_cell(store_uint(begin_cell(), 0, 1)))));
    $global_send($SendParameters$_constructor_to_body_value_mode($msg'jettonWalletAddress, $transferBody, 0, (2 + 64)));
    return (($self'owner), ());
}

(((slice)), ()) $Garant$_internal_binary_WithdrawTon((slice) $self, (int) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'amount) = $msg;
    ($self'owner)~$Garant$_fun_requireOwner();
    $global_send($SendParameters$_constructor_to_value_mode($self'owner, $msg'amount, (2 + 64)));
    return (($self'owner), ());
}

(((slice)), ()) $Garant$_internal_binary_WithdrawNft((slice) $self, (slice, slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'nftAddress, $msg'newOwner) = $msg;
    ($self'owner)~$Garant$_fun_requireOwner();
    cell $transferBody = $NftTransfer$_store_cell($NftTransfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $msg'newOwner, $self'owner, $global_emptyCell(), 0, begin_parse(end_cell(store_uint(begin_cell(), 0, 1)))));
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'nftAddress, 0, (2 + 64), $transferBody));
    return (($self'owner), ());
}

(((slice)), ()) $Garant$_internal_binary_OwnershipAssigned((slice) $self, (int, slice, slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'query_id, $msg'prev_owner, $msg'forward_payload) = $msg;
    slice $payload = $msg'forward_payload;
    int $amount = $payload~load_coins();
    int $isTon = false;
    if (($payload~load_coins() > 0)) {
        $isTon = true;
    }
    var ($sinit'code, $sinit'data) = $GarantWallet$_init_child(__tact_context_sys, $msg'prev_owner, $amount, $isTon, __tact_context_get_sender());
    slice $garantWalletAddress = $global_contractAddress(($sinit'code, $sinit'data));
    $global_send($SendParameters$_constructor_to_value_mode_code_data($garantWalletAddress, 1000000000, 2, $sinit'code, $sinit'data));
    cell $transferBody = $NftTransfer$_store_cell($NftTransfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $garantWalletAddress, $msg'prev_owner, $global_emptyCell(), 0, begin_parse(end_cell(store_uint(begin_cell(), 0, 1)))));
    ($self'owner)~$Garant$_fun_reply($transferBody);
    return (($self'owner), ());
}

(((slice)), ()) %$Garant$_internal_empty((slice) $self) impure inline {
    var ($self'owner) = $self;
    return (($self'owner), ());
}

(((slice)), ()) $Garant$_internal_binary_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner)~$Garant$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner), ());
}

;;
;; Get methods of a Contract Garant
;;

_ %balance() method_id(104128) {
    var self = $Garant$_contract_load();
    var res = self~$Garant$_fun_balance();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Garant$_contract_load();
    var res = self~$Garant$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmSKkvBLVFqFnjQVv9VVXUjUCcqQ7EX1oukVKbcb2g2vct";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Garant
;;

((slice), int) $Garant$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Withdraw message
    if (op == 976735757) {
        var msg = in_msg~$Withdraw$_load();
        self~$Garant$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawTon message
    if (op == 4206811366) {
        var msg = in_msg~$WithdrawTon$_load();
        self~$Garant$_internal_binary_WithdrawTon(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawNft message
    if (op == 2144643456) {
        var msg = in_msg~$WithdrawNft$_load();
        self~$Garant$_internal_binary_WithdrawNft(msg);
        return (self, true);
    }
    
    ;; Receive OwnershipAssigned message
    if (op == 85167505) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$Garant$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Garant$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Garant$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Garant$_contract_load();
    
    ;; Handle operation
    int handled = self~$Garant$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Garant$_contract_store(self);
}
